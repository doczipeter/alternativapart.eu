{"version":3,"sources":["components/Manifesto.jsx","App.jsx","index.js"],"names":["getTopics","manifestoData","length","topicSet","Set","forEach","entry","category","topic","add","md","Remarkable","Manifesto","titleData","React","useState","topics","selectedTopics","searchTerm","state","setState","useEffect","s","title","intro","toggleTopic","e","target","innerText","matchesSearchTerm","normalize","replace","toLowerCase","includes","style","display","padding","alignItems","flexDirection","justifyContent","width","maxWidth","className","Group","controlId","Prepend","Text","id","class","Control","placeholder","value","onChange","term","fontSize","map","index","key","variant","onClick","marginTop","entryTopicArray","foundSelectedTopic","entryTopic","hasSelectedTopic","statement","description","marginBottom","Toggle","as","Card","Header","eventKey","Collapse","Body","dangerouslySetInnerHTML","__html","render","jsonPath","App","url","Promise","resolve","xhr","XMLHttpRequest","open","onload","JSON","parse","responseText","send","then","result","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.83f389b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Remarkable } from \"remarkable\";\r\nimport \"./Manifesto.css\";\r\n\r\nconst getTopics = manifestoData => {\r\n  if (manifestoData.length === 0) return [];\r\n\r\n  const topicSet = new Set();\r\n\r\n  manifestoData.forEach(entry => {\r\n    entry.category.forEach(topic => {\r\n      topicSet.add(topic);\r\n    });\r\n  });\r\n\r\n  return [...topicSet];\r\n};\r\n\r\nconst md = new Remarkable();\r\n\r\nconst Manifesto = ({ manifestoData, titleData = [\"\", \"\"] }) => {\r\n  const searchPlaceholderString = \"KeresÃ©s a programban...\";\r\n\r\n  const [state, setState] = React.useState({\r\n    topics: getTopics(manifestoData),\r\n    selectedTopics: [],\r\n    searchTerm: \"\"\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    setState(s => ({\r\n      ...s,\r\n      topics: getTopics(manifestoData),\r\n      selectedTopics: getTopics(manifestoData)\r\n    }));\r\n  }, [manifestoData]);\r\n\r\n  React.useEffect(() => {\r\n    setState(s => ({\r\n      ...s,\r\n      title: titleData[0],\r\n      intro: titleData[1]\r\n    }));\r\n  }, [titleData]);\r\n\r\n  const toggleTopic = e => {\r\n    const topic = e.target.innerText;\r\n    let selectedTopics;\r\n    if (\r\n      state.selectedTopics.length === getTopics(manifestoData).length ||\r\n      (state.selectedTopics.length === 1 && state.selectedTopics[0] !== topic)\r\n    ) {\r\n      selectedTopics = [topic];\r\n    } else {\r\n      selectedTopics = getTopics(manifestoData);\r\n    }\r\n    setState(s => ({ ...s, selectedTopics }));\r\n  };\r\n\r\n  const hasSelectedTopic = entryTopicArray => {\r\n    let foundSelectedTopic = false;\r\n    entryTopicArray.forEach(entryTopic =>\r\n      state.selectedTopics.includes(entryTopic)\r\n        ? (foundSelectedTopic = true)\r\n        : 0\r\n    );\r\n    return foundSelectedTopic;\r\n  };\r\n\r\n  const searchBoxChange = e => {\r\n    const term = e.target.value;\r\n    setState(s => ({\r\n      ...s,\r\n      searchTerm: term,\r\n      selectedTopics: getTopics(manifestoData)\r\n    }));\r\n  };\r\n\r\n  const matchesSearchTerm = title => {\r\n    return state.searchTerm\r\n      ? title\r\n          .normalize(\"NFD\")\r\n          .replace(/[\\u0300-\\u036f]/g, \"\")\r\n          .toLowerCase()\r\n          .includes(\r\n            state.searchTerm\r\n              .normalize(\"NFD\")\r\n              .replace(/[\\u0300-\\u036f]/g, \"\")\r\n              .toLowerCase()\r\n          )\r\n      : true;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        padding: \"20px\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-around\",\r\n        width: \"100%\"\r\n      }}\r\n    >\r\n      <Form style={{ width: \"80%\", maxWidth: \"830px\" }}>\r\n        <div className=\"introWrapper\">\r\n          <h1 className=\"title\">{state.title}</h1>\r\n          <h2 className=\"intro\">{state.intro}</h2>\r\n        </div>\r\n        <Form.Group controlId=\"searchTopicsInput\">\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"searchIcon\">\r\n                <i class=\"material-icons\" id=\"searchFontElement\">search</i>\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              placeholder={searchPlaceholderString}\r\n              value={state.searchTerm}\r\n              onChange={searchBoxChange}\r\n            />\r\n          </InputGroup>\r\n        </Form.Group>\r\n        <Form.Group\r\n          controlId=\"topicButtons\"\r\n          style={{ fontSize: \"1.5em\" }}\r\n          className=\"topicButtons\"\r\n        >\r\n          {state.topics.map((topic, index) => (\r\n            <>\r\n              {index !== 0 && <div key={index} className=\"spacer\" />}\r\n              <Badge\r\n                variant={\r\n                  state.selectedTopics.includes(topic) ? \"dark\" : \"warning\"\r\n                }\r\n                onClick={toggleTopic}\r\n                key={topic}\r\n              >\r\n                {topic}\r\n              </Badge>\r\n            </>\r\n          ))}\r\n        </Form.Group>\r\n      </Form>\r\n      <Accordion style={{ width: \"80%\", maxWidth: \"830px\", marginTop: \"40px\" }}>\r\n        {manifestoData.map(\r\n          (entry, index) =>\r\n            hasSelectedTopic(entry.category) &&\r\n            (matchesSearchTerm(entry.statement) ||\r\n              matchesSearchTerm(entry.description)) && (\r\n              <Card style={{ marginBottom: \"10px\" }} key={index}>\r\n                <Accordion.Toggle as={Card.Header} eventKey={index}>\r\n                  <div\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <div>{entry.statement}</div>\r\n                    <div>\r\n                      {entry.category.map(topic => (\r\n                        <Badge key={topic} variant=\"dark\">\r\n                          {topic}\r\n                        </Badge>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={index}>\r\n                  <Card.Body>\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: md.render(entry.description)\r\n                      }}\r\n                    />\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            )\r\n        )}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Manifesto;\r\n","import React from 'react';\nimport Manifesto from './components/Manifesto';\nimport TopBar from './components/TopBar';\nimport './App.css';\n\nconst jsonPath = 'manifesto.json';\n\nfunction loadJson(url) {\n  return new Promise(resolve => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.onload = () => resolve(JSON.parse(xhr.responseText));\n    xhr.send();\n  });\n}\n\nfunction App() {\n  const [state, setState] = React.useState({\n    manifestoData: []\n  });\n\n  React.useEffect(() => {\n    loadJson(jsonPath).then(result => setState(s => ({...s, manifestoData: result[0], titleData: result[1]})));\n  }, []);\n\n  return (\n    <Manifesto manifestoData={state.manifestoData} titleData={state.titleData}/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}